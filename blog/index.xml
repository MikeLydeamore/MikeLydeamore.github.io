<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://www.michaellydeamore.com/blog/index.html</link>
<atom:link href="https://www.michaellydeamore.com/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Blog posts by Dr Michael Lydeamore</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Tue, 18 Jul 2023 14:00:00 GMT</lastBuildDate>
<item>
  <title>condensr: The academic website generator</title>
  <link>https://www.michaellydeamore.com/blog/condensr-academic-website-generator/index.html</link>
  <description><![CDATA[ 



<p>Everything needs a website. Products, startups, papers… as we all spend more and more of our lives online, the requirement to have a website only grows. I mean, this must be why Squarespace seems to sponsor every second YouTube and podcast creator!</p>
<p>But, building a website is a pain. Despite the myriad of tools available to try and make it easier. The internet is littered with no longer maintained websites, started by people with the best of intentions. Perhaps this is because it turns out to be far more work than expected, perhaps it’s because the money has run out to pay someone to maintain it.</p>
<section id="quarto-our-saviour." class="level2">
<h2 class="anchored" data-anchor-id="quarto-our-saviour.">Quarto, our saviour.</h2>
<p>Enter <a href="https://www.quarto.org">Quarto</a>. On it’s very front page, it promises to “publish reprocucible, production quality websites”. Sounds like the dream! And to an extent, it is. With three small commands (or one button push in RStudio), anyone can have a nice looking website ready to go.</p>
<p>The challenge, then, is taking the ‘reprocubility’ and ‘automation’ aims of Quarto to the next level for producing websites. Traditional content management systems (CMSs) have a powerful database architechture, that when paired with a nice front-end, let people upload and cross-link content across the website quickly and easily.</p>
<p><em>No such system exists for a Quarto website</em>. This is perhaps fine for a small blog or a website with only a handful of interconnected components, but rapidly gets out of hand for even small scale linking.</p>
</section>
<section id="where-this-is-no-solution-a-solution-is-needed" class="level2">
<h2 class="anchored" data-anchor-id="where-this-is-no-solution-a-solution-is-needed">Where this is no solution, a solution is needed</h2>
<p>This was the motivation behind creating <code>condensr</code>, a package that comes close to an in-memory database and will automagically cross-link people with their projects and publications, with some nice in-built styling.</p>
<p>Users can specify staff members, their projects and their publications, and all is output in a nice, consistent and cross-linked format.</p>
<p>For example, here is a screenshot of the <a href="https://www.spectrum.edu.au/">SPECTRUM</a> website, which is using a <code>condensr</code> system to generate it’s pages:</p>
<p><img src="https://www.michaellydeamore.com/blog/condensr-academic-website-generator/spectrum-screenshot.jpg" class="img-fluid"></p>
<p>Publications automatically appear below staff pages, as do projects, and a short description of the staff member.</p>
</section>
<section id="the-condensr-data-structure" class="level2">
<h2 class="anchored" data-anchor-id="the-condensr-data-structure">The <code>condensr</code> data structure</h2>
<p>The package let’s users sort out their own data storage system. For very small projects, you can even code these directly in R, since all the package wants is objects of class <code>staff_member</code>, <code>project</code> and <code>publication</code> respectively, each of which has their own constructors.</p>
<p>As an example, below is the code that is produced by <code>condensr::create_website</code>:</p>
<div class="cell">
<details>
<summary>This code chunk is long, so click here to see it</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(condensr)</span>
<span id="cb1-2"></span>
<span id="cb1-3">staff_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"joe-bloggs"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">staff_member</span>(</span>
<span id="cb1-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"joe-bloggs"</span>,</span>
<span id="cb1-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joe Bloggs"</span>,</span>
<span id="cb1-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">description =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joe is a Dr of Blogging."</span>,</span>
<span id="cb1-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">external_link =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.example.com/"</span></span>
<span id="cb1-9">    )</span>
<span id="cb1-10">)</span>
<span id="cb1-11"></span>
<span id="cb1-12">publication_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">publication</span>(</span>
<span id="cb1-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joe's Blogging Paper"</span>,</span>
<span id="cb1-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">related_staff =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"joe-bloggs"</span>),</span>
<span id="cb1-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">link =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb1-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">citation =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bloggs, J., Bloggy, Y. (2019), The power of blogging, Australian Journal of Bloggs, 43: 149-155."</span>,</span>
<span id="cb1-18">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2019-01-01"</span>)</span>
<span id="cb1-19">    )</span>
<span id="cb1-20">)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the publications by their date</span></span>
<span id="cb1-23">publication_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort_list_by_date</span>(publication_list)</span>
<span id="cb1-24"></span>
<span id="cb1-25">project_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">project</span>(</span>
<span id="cb1-27">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"joes-model"</span>,</span>
<span id="cb1-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joe's Blogging Model"</span>,</span>
<span id="cb1-29">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">related_staff =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"joe-bloggs"</span></span>
<span id="cb1-30">    )</span>
<span id="cb1-31">)</span></code></pre></div>
</details>
</div>
<p>You could expand this list to be as long as you like.</p>
<p>For medium sized pursuits, I think this would get out of hand pretty quickly. For the two websites I’ve built during this package development, all the data is contained in two Google sheets, and a shared drive for the photos. You can see the source code for those on <a href="https://github.com/spectrum-spark/website-spectrum">GitHub</a>.</p>
</section>
<section id="the-web-is-not-one-size-fits-all" class="level2">
<h2 class="anchored" data-anchor-id="the-web-is-not-one-size-fits-all">The web is not one-size-fits-all</h2>
<p>This package will be useful for a bunch of small groups to build websites quickly. But, it isn’t a fully featured CMS, and doesn’t pretend to be. If you have a big group, a <em>lot</em> of content, or will be around for a long time, then I would say look elsewhere.</p>
<p>But, if you want to knock up a website that looks pretty good, pretty quickly, and will allow you to keep your presence up to date with news, publications and new staff, then check out <code>condensr</code>, it might just serve your needs.</p>


</section>

 ]]></description>
  <category>quarto</category>
  <category>software</category>
  <guid>https://www.michaellydeamore.com/blog/condensr-academic-website-generator/index.html</guid>
  <pubDate>Tue, 18 Jul 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Reducing duplication in teaching materials</title>
  <link>https://www.michaellydeamore.com/blog/reducing-teaching-duplication-with-unilur/index.html</link>
  <description><![CDATA[ 



<p>As a young, impressionable undergraduate, a Computer Science lecturer once told me:</p>
<blockquote class="blockquote">
<p>If you use a value more than once, it should be a variable. Every time. Because, one time you will forget to change the third mention.</p>
</blockquote>
<p>We’ve all done it. Whether it’s hard-coding a time period and then changing dataset, or whether it’s <a href="https://www.doherty.edu.au/news-events/news/doherty-institute-modelling-report-for-national-cabinet">hard-coding a population size</a> in a model that’s quoted on national television, we all do our best to keep code clean to avoid these kinds of pitfalls.</p>
<p>So why, then, does it seem like so many of us have at least two copies of every tutorial and assignment? One with just the questions, and one with the solutions on it? I understand that both types of files are required, at least until generative AI makes us fully change our assessment, but the idea of having two identical questions in two different files makes me very nervous.</p>
<p>In fact, earlier this year while teaching a unit for the second time, one of my tutors pointed out that the solutions had a different set of numbers in the question compared to the ones students were answering. Unfortunately, this also materially changed the interpretation of the answer, and so I had to go through, re-issue solutions and re-mark a pile of assignments.</p>
<p>At EBS, a large portion of the content for our units are managed through RMarkdown, in a <a href="https://github.com/numbats/monash">reasonably standardised format</a>. As a sign of the times, every time I inherit a unit, I try to port material over to <a href="https://quarto.org">Quarto</a>. It just feels like the right thing to do. Given the ability for both of these systems to output multiple formats on render, I started thinking about how to have <strong>one</strong> master question file that could output both the student question set, and the full solutions at the same time.</p>
<section id="a-clunky-first-attempt" class="level2">
<h2 class="anchored" data-anchor-id="a-clunky-first-attempt">A clunky first attempt</h2>
<p>I spent a bit too much time starting at CSS and ad-hoc web development, even though the results are <a href="https://www.spectrum.edu.au/">sometimes</a> <a href="https://www.spark.edu.au">nice</a>. When all you have is a hammer, everything looks like a CSS-based nail. Enter the chunk option:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r, echo=solutions}</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-3">covid_cases <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> readr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://docs.health.vic.gov.au/covid19/data/NCOV_cases_by_postcode_LGA.csv"</span>)</span>
<span id="cb1-4"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>This is pretty straightforward. I set the variable <code>solutions</code> at the top of the file to be <code>TRUE</code> if I want solutions to be printed, and false otherwise. With a bit of fanangling, you could also pass this into <code>params</code> in the YAML at the top of the document, and then two calls to <code>rmarkdown::render()</code> with the relevant parameters would probably get you what you want. With a bit of styling:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{css}</span></span>
<span id="cb2-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solution</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-3">  padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> 10px<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-4">  border<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> 1px solid black<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5">  margin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> 5px<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solution</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> background<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> #F9E79F<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solution</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-11">  font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> bold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-12">  font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> italic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solution</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>before <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> content<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solution"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;}</span></span>
<span id="cb2-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>you can even make it look nice. It was a good first attempt, and saw me through for that semester. But, I still felt like there had to be a cleaner way, and something I could generalise to Quarto (which loses me the luxury of the <code>rmarkdown::render()</code> call).</p>
</section>
<section id="inheriting-a-solution" class="level2">
<h2 class="anchored" data-anchor-id="inheriting-a-solution">Inheriting a solution</h2>
<p>For the first time this year, I am running a subject on my own. As I can’t really do anything independently in my life, I set about borrowing all the relevant templates for the LMS and converting handbook entries. At some point, I should share the Moodle template - it really is something, even though it isn’t mine!</p>
<p>I was very fortunate. I inherited a <em>very</em> clean set of lecture notes from <a href="https://emitanaka.org">Emi Tanaka</a>, that had even been ported to Quarto already. Bar some minor changes, I’ll teach this course as I got it in it’s first year, if for no other reason than so I can learn it fully!</p>
<p>While in my pre-semester prep, I noticed that the tutorials are still Rmd files. Nothing else in the course is, so why these I wondered?</p>
<p>It turns out, in what shouldn’t be surprise, someone else had already engineered this master-copy-to-2-outputs solution:</p>
<pre><code>---
title: 'ETC5523: Communicating with Data'
subtitle: "Tutorial 1"
author: "Michael Lydeamore"
date: "Week 1"
output: 
  unilur::tutorial_html_solution: 
    toc: true
    suffix: "-solution"
  unilur::tutorial_html: 
    toc: true
    suffix: "-question"
---</code></pre>
<p>The <a href="https://github.com/koncina/unilur">unilur</a> package wsas designed for exactly this. I must say, it doesn’t look particularly active on GitHub, but nonetheless, it worked perfectly. With an extra argument to <code>rmarkdown::render(output_format = "all")</code>, two documents are produced, with the relevant suffixes on them. Brilliant!</p>
<p>The styling I inherited was a little egregious (I really can’t do <span style="color:white; background-color:green;">white text on a green background</span>), but it did the job. And no more multiple copies of files for me to royally screw up when I’m in a hurry.</p>
<p>The only problem is, it’s an Rmarkdown output format, not a Quarto one. And literally everything else in this course is Quarto. There’s even lectures dedicated to it. I stumbled upon a Quarto port, converting it to an <a href="https://github.com/ginolhac/unilur">extension</a>, which was a great start. The system the author had gone with was to add a chunk option:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```{r}</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| unilur-solution: true</span></span>
<span id="cb4-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">```</span></span></code></pre></div>
<p>combined with a YAML boolean <code>show-solution: true</code>, which you could change to generate the two files. I ported over the first tutorial reasonably quickly, and it performed <em>almost</em> as expected. I had nice expandable dropdowns for solutions:</p>
<p><img src="https://www.michaellydeamore.com/blog/reducing-teaching-duplication-with-unilur/unilur-solution-example.png" class="img-fluid"></p>
<p>The only problem was combining code chunks with text, which in a course all about how to explain your story, was quite important. This is because the only way to get a solution block to generate is with the chunk option, and so text solutions have to be enclosed in a <code>block</code> type. Embedding code chunks into a <code>block</code>… uh… block <em>does</em> work, but you lose syntax highlighting, and the ability to execute them if you want the solutions to actually compile.</p>
<p>The clunky solution to this is to have two solution blocks, and write the answer in such a way that the code comes after the text. I guess this is somewhat traditional, it’s certainly how I explained algorithms in my PhD thesis, but it is difficult for markers, and a bit jarring for students to have to jump around the page. Not quite as bad as figures at the end of a manuscript, but it has similar vibes. I don’t like it.</p>
<section id="diving-into-the-extension" class="level3">
<h3 class="anchored" data-anchor-id="diving-into-the-extension">Diving into the extension</h3>
<p>Like all Quarto extensions, the meat of what’s going on is in the <code>_extensions/</code> folder. There’s a YAML file that gives defaults for what is added by the extension (which here is just a <code>contributes</code> for a LUA filter), some CSS, and a LUA filter. I can’t really write LUA, certainly not good LUA. My only experience of it is a terrible mod I made many years ago for <a href="https://www.factorio.com/">Factorio</a>, which as an aside is a brilliant game everyone should play.</p>
<p>But, I have enough CS experience and training to be able to read these things and clunk my way through them. Thankfully, this <a href="https://github.com/ginolhac/unilur/blob/main/_extensions/unilur/unilur.lua">LUA filter</a> isn’t particularly long. The <code>Div</code> function just checks if we’re in the right sort of thing (so a “cell”, and has the attribute <code>unilur-solution == TRUE</code>), and if it’s all good, spits out the solution. Otherwise, instead of returning the content (which would be <code>el</code> in this code), we return a totally empty element.</p>
<p>This means that extending the functionality to include a class is pretty easy. Just check if the class of the div (which for reasons unknown to me is always capitalised in LUA) is also called <code>unilur-solution</code><sup>1</sup>:</p>
<pre><code>
if (el.classes:includes("cell") and el.attributes["unilur-solution"] == "true") or (el.classes:includes("unilur-solution")) then
... do stuff ...
</code></pre>
<p>This worked a treat. Now I can use a Pandoc <a href="https://pandoc.org/chunkedhtml-demo/8.18-divs-and-spans.html">fenced div</a> to specify solutions with text and code, and the code is highlighted and executed exactly as it would be on a normal block. The system works like this:</p>
<pre><code>
::: unilur-solution

Here is a solution that is inside a div. The contents of this will only be shown
in the solution document.

:::
</code></pre>
<p>Now the last step: getting multiple documents to output from one master file, from one <code>quarto render</code> call.</p>
</section>
<section id="multiple-formats-at-once" class="level3">
<h3 class="anchored" data-anchor-id="multiple-formats-at-once">Multiple formats at once</h3>
<p>Quarto supports multiple format documents <a href="https://quarto.org/docs/output-formats/html-multi-format.html">out-of-the-box</a>, and for the most part, they work pretty well, minus a quirk with RStudio only rendering one of the formats. Use the CLI for that by the way, it works much cleaner.</p>
<p>There’s even support for formats with the same file extension so they don’t overwrite each other. Just add <code>output-file</code> to your YAML and you can generate two HTML files.</p>
<p>So this was looking pretty easy. I’ll just convert the extension to an output format, include it twice in the header of my tutorial and off we go. In case you ever need it, here’s how you can specify your own output format:</p>
<pre><code>title: Unilur Questions
quarto-required: "&gt;=1.3.0"
contributes:
    format:
        common:
            filters:
                - unilur.lua
            show-solution: false
        html:</code></pre>
<p>You set your document type as the folder your extension is in, plus the format you want. So in this case, I have:</p>
<pre><code>format:
    unilur-question-html:
        output-file: tutorial-01-question.html
        embed-resources: true</code></pre>
<p>I forgot the <code>-html</code> the first time and caused myself a lot of pain.</p>
<p><em>Unfortunately</em> you can’t have the <em>same</em> output format twice, just changing the YAML options. I don’t understand why, I won’t pretend to understand why, and in the kindest way, I don’t think I really want to understand why.</p>
<p>So, sadly, the solution was to have two almost identical extensions: <code>unilur-question</code>, which defaults <code>show-solution: false</code>, and <code>unilur-solution</code>, which defaults to the opposite. Still two files, I guess, but it ends up being not too bad.</p>
</section>
</section>
<section id="the-workflow" class="level2">
<h2 class="anchored" data-anchor-id="the-workflow">The workflow</h2>
<p>So now, it’s pretty straightforward. You can use the extension like any other Quarto extension<sup>2</sup>:</p>
<pre><code>quarto install extension MikeLydeamore/unilur</code></pre>
<p>which will install both identical extensions. Set your YAML as per above, fence off your solutions using either the chunk option or the div, and <code>quarto render</code> your way to what is in my opinion, a much cleaner workflow.</p>
<p>The YAML header becomes:</p>
<pre><code>format:
    unilur-question-html:
        output-file: tutorial-01-question.html
        embed-resources: true
    unilur-solution-html:
        output-file: tutorial-01-solution.html
        embed-resources: true</code></pre>
<p>which I think is pretty clean. It’s not quite the <code>suffix</code> tag that’s in the original extension, but I think I can live with that. If anyone knows a way to get the current name of the file in the YAML (or possibly elsewhere in extension-land), I’d love to hear it so I don’t need <code>output-file</code> anymore.</p>
<p>If you use this, or have other solutions, I’d love to hear about them. Please let me know however you see fit: <a href="https://www.twitter.com/MikeLydeamore">Twitter</a>, <a href="https://github.com/MikeLydeamore">GitHub</a>, or <a href="mailto:michael.lydeamore@monash.edu">e-mail</a>.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Quarto (and Rmarkdown for that matter) doesn’t have a LUA highlighter so you’ll have to read this one yourself.↩︎</p></li>
<li id="fn2"><p>Pending an open <a href="https://github.com/ginolhac/unilur/pull/2">pull request</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>quarto</category>
  <category>teaching</category>
  <guid>https://www.michaellydeamore.com/blog/reducing-teaching-duplication-with-unilur/index.html</guid>
  <pubDate>Tue, 18 Jul 2023 14:00:00 GMT</pubDate>
</item>
</channel>
</rss>
